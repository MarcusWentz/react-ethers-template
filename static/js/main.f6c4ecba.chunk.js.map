{"version":3,"sources":["SimpleStorage.js","App.js","reportWebVitals.js","index.js"],"names":["SimpleStorage","contractAddress","undefined","window","ethereum","alert","location","reload","providerRead","ethers","providers","Web3Provider","contractRead","Contract","contractABI","useState","errorMessage","setErrorMessage","setDefaultAccount","connButtonText","setConnButtonText","currentContractVal","setCurrentContractVal","setProvider","setSigner","contract","setContract","connectWalletHandler","a","isMetaMask","request","method","then","accounts","accountChangedHandler","substr","catch","error","message","networkVersion","params","chainId","console","log","newAccount","updateEthers","on","tempProvider","tempSigner","getSigner","tempContract","getStoredData","storedData","storedDataCallValue","toNumber","className","onClick","onSubmit","event","preventDefault","target","setText","value","set","tx","e","code","type","id","placeholder","action","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6c4ecba.chunk.js","sourcesContent":["// https://docs.metamask.io/guide/ethereum-provider.html#using-the-provider\n\nimport React, {useState} from 'react'\nimport {ethers} from 'ethers'\nimport contractABI from './contracts/contractABI.json'\n\nconst SimpleStorage = () => {\n\n\t// deploy simple storage contract and paste deployed contract address here. This value is local ganache chain\n\tlet contractAddress = '0xdbaA7dfBd9125B7a43457D979B1f8a1Bd8687f37';\n\n\tconst goerliChainId = 5;\n\n\tif(window.ethereum === undefined){\n\t\talert(\"Metamask is not detected. Install Metamask then try again.\");\n\t\twindow.location.reload(true);\n\t}\n\n\tconst providerRead = new ethers.providers.Web3Provider(window.ethereum); //Imported ethers from index.html with \"<script src=\"https://cdn.ethers.io/lib/ethers-5.6.umd.min.js\" type=\"text/javascript\"></script>\".\n\n\tconst contractRead = new ethers.Contract(contractAddress, contractABI, providerRead);\n\n\t// const signer = provider.getSigner(); //Do this when the user clicks \"enableEthereumButton\" which will call getAccount() to get the signer private key for the provider.  \t\n\n\t// const providerRead = new ethers.providers.Web3Provider(window.ethereum); //Imported ethers from index.html with \"<script src=\"https://cdn.ethers.io/lib/ethers-5.6.umd.min.js\" type=\"text/javascript\"></script>\".\n\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('ðŸ¦Š Connect Wallet');\n\n\tconst [currentContractVal, setCurrentContractVal] = useState('Connect wallet then click button above');\n\n\tconst [providerAccount, setProvider] = useState(null);\n\tconst [signer, setSigner] = useState(null);\n\tconst [contract, setContract] = useState(null);\n\n\tconst connectWalletHandler = async () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(accounts => {\n\t\t\t\taccountChangedHandler(accounts[0]);\n\t\t\t\tsetConnButtonText(accounts[0].substr(0,5) + \"...\" +  accounts[0].substr(38,4) );\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\n\t\t\t});\n\n\t\t\t// let chainId = await getChainIdConnected();\n\t\t\t// alert(JSON.stringify(chainId))\n\n\t\t\tif(window.ethereum.networkVersion != goerliChainId){\n\t\t\t\t// alert(\"You are not on the Goerli Testnet! Please switch to Goerli and refresh page.\")\n\t\t\t\ttry{\n\t\t\t\t  await window.ethereum.request({\n\t\t\t\t\t  method: \"wallet_switchEthereumChain\",\n\t\t\t\t\t  params: [{\n\t\t\t\t\t\t chainId: \"0x5\"\n\t\t\t\t\t  }]\n\t\t\t\t\t})\n\t\t\t\t//   location.reload(); \n\t\t\t\t\twindow.location.reload(true);\n\t\t\t\t  // alert(\"Failed to add the network at chainId \" + goerliChainId + \" with wallet_addEthereumChain request. Add the network with https://chainlist.org/ or do it manually. Error log: \" + error.message)\n\t\t\t\t} catch (error) {\n\t\t\t\t  alert(\"Failed to add the network at chainId \" + goerliChainId + \" with wallet_addEthereumChain request. Add the network with https://chainlist.org/ or do it manually. Error log: \" + error.message)\n\t\t\t\t}\n\t\t\t  }\n\n\t\t} else {\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\n\t// update account, will cause component re-render\n\tconst accountChangedHandler = (newAccount) => {\n\t\tsetDefaultAccount(newAccount);\n\t\tupdateEthers();\n\t}\n\n\t// listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\n\tconst updateEthers = () => {\n\t\tlet tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\t\tsetProvider(tempProvider);\n\n\t\tlet tempSigner = tempProvider.getSigner();\n\t\tsetSigner(tempSigner);\n\n\t\tlet tempContract = new ethers.Contract(contractAddress, contractABI, tempSigner);\n\t\tsetContract(tempContract);\t\n\t}\n\n\tconst setHandler = (event) => {\n\n\t\tevent.preventDefault(); //Keep this or else the page will refresh.\n\n\t\tif(event.target.setText.value === \"\") {\n\t\t\talert(\"Enter a number.\");\n\t\t\treturn;\n\t\t}\n\t\tif(contract === null) {\n\t\t\talert(\"Connect your wallet.\");\n\t\t\treturn;\n\t\t}\n\n\t\tcontract.set(event.target.setText.value)\n\t\t.then(tx => {\n\t\t\tconsole.log(\"Tx submitted: \" + tx)\n\t\t})\n\t\t.catch(e => {\n\t\t\t if (e.code === 4001){\n\t\t\t\t alert(\"Transaction request failed.\")\n\t\t\t } \n\t\t});\n\t\t\n\t}\n\n\t// const getCurrentVal = async () => {\n\t// \ttry{\n\t// \t\tlet val = await contract.storedData();\n\t// \t\tsetCurrentContractVal(val.toNumber());\n\t// \t} catch {\n\t// \t\talert(\"Connect your wallet first.\")\n\t// \t}\n\t// }\n\n\tgetStoredData();\n\n\tasync function getStoredData() {\n\t\tlet storedDataCallValue = await contractRead.storedData()\n\t\tif(storedDataCallValue.toNumber() === undefined){\n\t\t\tsetCurrentContractVal(\"Install Metamask and select Goerli Testnet to have a Web3 provider to read blockchain data.\");\n\t\t}\n\t\telse{\n\t\t\tsetCurrentContractVal(storedDataCallValue.toNumber());\n\t\t}\n\t  }\n\t\n\t// async function getChainIdConnected() {\n\n\t// \tconst connectedNetworkObject = await providerRead.getNetwork();\n\t// \tconst chainIdConnected = connectedNetworkObject.chainId;\n\t// \treturn chainIdConnected\n\t  \n\t// }\n\n\tcontractRead.on(\"setEvent\", () => {\n\n\t\tgetStoredData()\n\t  \n\t});\n\n\treturn (\n\t\t<div>\n\t\t<h4> </h4>\n\t\t\t<button className=\"button buttonConnectMetamask\" onClick={connectWalletHandler}>{connButtonText}</button>\n\t\t\t<div>\n\t\t\t<h5> storedData(): </h5>\n\t\t\t{currentContractVal}\n\t\t\t{errorMessage}\n\t\t\t<h4> </h4>\n\t\t\t</div>\n\t\t\t<form onSubmit={setHandler}>\n\t\t\t\t<button className=\"button buttonHighContrast\" type={\"submit\"}> set(uint256 x) </button>\n\t\t\t\t<h4> </h4>\n\t\t\t\t<input id=\"setText\" type=\"text\" placeholder=\"input uint256 value\"/>\n\t\t\t</form>\n\t\t\t<h4> </h4>\n\t\t\t<form action=\"https://github.com/MarcusWentz/react-ethers-template\">\n\t\t\t\t<input className=\"button buttonHighContrast\" type=\"submit\" value=\"GitHub\" />\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default SimpleStorage;","// import logo from './logo.svg';\nimport './App.css';\nimport SimpleStorage from './SimpleStorage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleStorage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}